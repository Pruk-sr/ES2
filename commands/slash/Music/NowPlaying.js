const formatDuration = require('../../../structures/FormatDuration.js');
const { QueueDuration } = require("../../../structures/QueueDuration.js");
const { EmbedBuilder } = require("discord.js");
const ytsr = require("youtube-sr").default;


module.exports = { 
    name: ["nowplaying"],
    description: "Display the song currently playing.",
    category: "Music",
    run: async (client, interaction) => {
        await interaction.deferReply({ ephemeral: false });
        const realtime = client.config.NP_REALTIME;
        const msg = await interaction.editReply(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Ñ‡∏∞...`);
        const player = client.manager.players.get(interaction.guild.id);
        if (!player) return msg.edit(`‚ùé ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢‡∏ô‡∏∞`);
        
        const song = player.queue.current;
        const CurrentDuration = formatDuration(player.position);
        const TotalDuration = formatDuration(song.length);
        const Part = Math.floor(player.position / song.length * 30);
        const Emoji = player.playing ? "üî¥ |" : "‚è∏ |";
        const embeded = new EmbedBuilder()
        .setAuthor({ name: player.playing ? `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô...` : `‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß...`, iconURL: `https://cdn.discordapp.com/emojis/741605543046807626.gif` })
        .setDescription(`**[${song.title}](${song.uri})**`)
        .setColor(client.color)
        .addFields({ name: `‡∏ä‡πà‡∏≠‡∏á:`, value: `${song.author}`, inline: true })
        .addFields({ name: `‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏ô‡∏µ‡πâ:`, value: `${song.requester}`, inline: true })
        .addFields({ name: `üîâ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á:`, value: `${player.volume * 100}%`, inline: true })
        .setTimestamp()
        if (song.thumbnail) {
            const songInfo = await ytsr.searchOne(song.uri);
            const views = songInfo.views;
            const uploadat = songInfo.uploadedAt;
            embeded.setThumbnail(`https://img.youtube.com/vi/${song.identifier}/maxresdefault.jpg`);
            embeded.addFields({ name: `‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß:`, value: `${player.queue.length}`, inline: true })
            embeded.addFields({ name: `‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:`, value: `${formatDuration(QueueDuration(player))}`, inline: true })
            embeded.addFields({ name: `‡∏•‡∏π‡∏õ:`, value: `${player.loop !== 'none' ? `  |  ${player.loop === "track" ? "‡πÄ‡∏û‡∏•‡∏á" : "‡∏Ñ‡∏¥‡∏ß"}` : "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î"}`, inline: true })
            embeded.addFields({ name: `‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß:`, value: `${views} views`, inline: true })
            embeded.addFields({ name: `‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î:`, value: `${uploadat}`, inline: true })
            embeded.addFields({ name: `‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î:`, value: `${player.queue.current.isStream ? "Stream" : `**[y2mate](https://www.y2mate.com/youtube/${song.identifier})**`}`, inline: true })
            embeded.addFields({ name: `üïí ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: \`[${CurrentDuration} / ${TotalDuration}]\``, value: `\`\`\`${Emoji} ${'‚îÄ'.repeat(Part) + 'üé∂' + '‚îÄ'.repeat(30 - Part)}\`\`\`` })
        } else {
            embeded.setThumbnail(client.user.displayAvatarURL({ dynamic: true, size: 2048 }));
            embeded.addFields({ name: `‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß:`, value: `${player.queue.length}`, inline: true })
            embeded.addFields({ name: `‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:`, value: `${formatDuration(QueueDuration(player))}`, inline: true })
            embeded.addFields({ name: `üîÅ ‡∏ó‡∏≥‡∏ã‡πâ‡∏≥:`, value: `${player.loop !== 'none' ? `  |  Loop: ${player.loop === "track" ? "‡πÄ‡∏û‡∏•‡∏á" : "‡∏Ñ‡∏¥‡∏ß"}` : "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î"}`, inline: true })
            embeded.addFields({ name: `‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß:`, value: `N/A`, inline: true })
            embeded.addFields({ name: `‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î:`, value: `N/A`, inline: true })
            embeded.addFields({ name: `‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î:`, value: `N/A`, inline: true })
            embeded.addFields({ name: `üïí ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: \`[${CurrentDuration} / ${TotalDuration}]\``, value: `\`\`\`${Emoji} ${'‚îÄ'.repeat(Part) + 'üé∂' + '‚îÄ'.repeat(30 - Part)}\`\`\`` })
        }
        const nwp = await msg.edit({ content: " ", embeds: [embeded]});
        if (realtime === 'true') {
        client.interval = setInterval(async () => {
                if (!player.playing) return;
                const song = player.queue.current;
                const CurrentDuration = formatDuration(player.position);
                const TotalDuration = formatDuration(song.length);
                const Part = Math.floor(player.position / song.length * 30);
                const Emoji = player.playing ? "üî¥ |" : "‚è∏ |";
                const embeded = new EmbedBuilder()
                .setAuthor({ name: player.playing ? `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô...` : `‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß...`, iconURL: `https://cdn.discordapp.com/emojis/741605543046807626.gif` })
                .setDescription(`**[${song.title}](${song.uri})**`)
                .setColor(client.color)
                .addFields({ name: `‡∏ä‡πà‡∏≠‡∏á:`, value: `${song.author}`, inline: true })
                .addFields({ name: `‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏ô‡∏µ‡πâ:`, value: `${song.requester}`, inline: true })
                .addFields({ name: `üîâ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á:`, value: `${player.volume * 100}%`, inline: true })
                .setTimestamp()
                if (song.thumbnail) {
                    embeded.setThumbnail(`https://img.youtube.com/vi/${song.identifier}/maxresdefault.jpg`);
                    embeded.addFields({ name: `‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß:`, value: `${player.queue.length}`, inline: true })
                    embeded.addFields({ name: `‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:`, value: `${formatDuration(QueueDuration(player))}`, inline: true })
                    embeded.addFields({ name: `‡∏•‡∏π‡∏õ:`, value: `${player.loop !== 'none' ? `  |  ${player.loop === "track" ? "‡πÄ‡∏û‡∏•‡∏á" : "‡∏Ñ‡∏¥‡∏ß"}` : "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î"}`, inline: true })
                    embeded.addFields({ name: `‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß:`, value: `N/A`, inline: true })
                    embeded.addFields({ name: `‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î:`, value: `N/A`, inline: true })
                    embeded.addFields({ name: `‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î:`, value: `${player.queue.current.isStream ? "Stream" : `**[y2mate](https://www.y2mate.com/youtube/${song.identifier})**`}`, inline: true })
                    embeded.addFields({ name: `üïí ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: \`[${CurrentDuration} / ${TotalDuration}]\``, value: `\`\`\`${Emoji} ${'‚îÄ'.repeat(Part) + 'üé∂' + '‚îÄ'.repeat(30 - Part)}\`\`\`` })
                } else {
                    embeded.setThumbnail(client.user.displayAvatarURL({ dynamic: true, size: 2048 }));
                    embeded.addFields({ name: `‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß:`, value: `${player.queue.length}`, inline: true })
                    embeded.addFields({ name: `‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:`, value: `${formatDuration(QueueDuration(player))}`, inline: true })
                    embeded.addFields({ name: `üîÅ ‡∏ó‡∏≥‡∏ã‡πâ‡∏≥:`, value: `${player.loop !== 'none' ? `  |  ${player.loop === "track" ? "‡πÄ‡∏û‡∏•‡∏á" : "‡∏Ñ‡∏¥‡∏ß"}` : "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î"}`, inline: true })
                    embeded.addFields({ name: `‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß:`, value: `N/A`, inline: true })
                    embeded.addFields({ name: `‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î:`, value: `N/A`, inline: true })
                    embeded.addFields({ name: `‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î:`, value: `N/A`, inline: true })
                    embeded.addFields({ name: `üïí ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: \`[${CurrentDuration} / ${TotalDuration}]\``, value: `\`\`\`${Emoji} ${'‚îÄ'.repeat(Part) + 'üé∂' + '‚îÄ'.repeat(30 - Part)}\`\`\`` })
                }
                nwp.edit({ content: " ", embeds: [embeded]});
            }, 15000);
                
        } else if (realtime === 'false') {
            if (!player.playing) return;
            if (nwp) nwp.edit({ content: " ", embeds: [embeded] });
        }
    }
 }
